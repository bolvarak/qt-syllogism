///////////////////////////////////////////////////////////////////////////////
/// Definitions //////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#ifndef SYLLOGISM_COMPARISON_H
#define SYLLOGISM_COMPARISON_H

///////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include "QtCore/QString"
#include "Equivalence.hpp"

///////////////////////////////////////////////////////////////////////////////
/// Syllogism Namespace //////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

namespace Syllogism
{

	///////////////////////////////////////////////////////////////////////////
	/// Syllogism::Comparison Structure Definition ///////////////////////////
	/////////////////////////////////////////////////////////////////////////

	struct Comparison
	{
		///////////////////////////////////////////////////////////////////////
		/// Properties ///////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This property contains the equivalence enum this value is associated with
		 * @brief Syllogism::Comparison::equivalence
		 * @var Syllogism::Equivalence
		 */
		Equivalence equivalence;

		/**
		 * @paragraph This property contains the matched flag for the comparison
		 * @brief Syllogism::Comparison::matched
		 * @var bool
		 */
		bool matched;

		///////////////////////////////////////////////////////////////////////
		/// Constructor //////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method instantiates the comparison object
		 * @brief Syllogism::Comparison::Comparison()
		 * @param Syllogism::Equivalence eqvEquivalence [Syllogism::Equivalence::Unknown]
		 * @param bool blnMatched [false]
		 */
		Comparison(Equivalence eqvEquivalence = Equivalence::Unknown, bool blnMatched = false) {
			// Set the equivalence
			equivalence = eqvEquivalence;
			// Set the matched flag
			matched     = blnMatched;
		}

		///////////////////////////////////////////////////////////////////////
		/// Converters ///////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method converts the comparison object to a string representation
		 * @brief Syllogism::Comparison::toString()
		 * @return QString
		 */
		QString toString() {
			// Determine the equivalence
			if (equivalence == Equivalence::Equality) {
				// We're done
				return QString("Equal");
			} else {
				// We're done
				return QString("Uknown/Undefined");
			}
		}

		///////////////////////////////////////////////////////////////////////
		/// Getters //////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////

		/**
		 * @paragraph This method returns the equvalence enumeration type from the instance
		 * @brief Syllogism::Comparison::getEquivalence()
		 * @return Syllogism::Equivalence Syllogism::Comparison::equivalence
		 */
		Equivalence getEquivalence() { return equivalence; }

		/**
		 * @paragraph This method returns the matched flag from the instance
		 * @brief Syllogism::Comparison::getMatched()
		 * @return bool Syllogism::Comparison::matched
		 */
		bool getMatched()            { return matched;     }

	///////////////////////////////////////////////////////////////////////////
	}; // End Syllogism::Comparison Class Definition /////////////////////////
	/////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
} // End Syllogism Namespace /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
#endif // End Definitions ////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
